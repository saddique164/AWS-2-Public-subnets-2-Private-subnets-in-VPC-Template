{
	"AWSTemplateFormatVersion" : "2010-09-09",

	"Description" : "Saddique Khan wrote the template to deploy two public and two private subnets in VPC along with NAT GateWay to access the internet ",

	"Parameters" : {
	    "SSHLocation": {
				  "Description": "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
				  "Type": "String",
				  "MinLength": "9",
				  "MaxLength": "18",
				  "Default": "0.0.0.0/0",
				  "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
				  "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    }

	},
	
	"Mappings": {
    
	"SubnetConfig": {
      "VPC": { "CIDR": "10.0.0.0/16" },
      "Public1": { "CIDR": "10.0.0.0/24" },
      "Public2": { "CIDR": "10.0.1.0/24" },
	  "Private1": { "CIDR": "10.0.2.0/24" },
	  "Private2": { "CIDR": "10.0.3.0/24" }
    }

	},

	"Resources" : {
	    
	"VPC": {
       "Type": "AWS::EC2::VPC",
		"Properties": {
        "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "VPC", "CIDR" ] },
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Application",
            "Value": { "Ref": "AWS::StackId" }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },

	"PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
				"VpcId": { "Ref": "VPC" },
				"CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Public1", "CIDR" ] },
				"AvailabilityZone": {
				  "Fn::Select": [
					"0",
					{ "Fn::GetAZs": "" }
				  ]
				},
				"Tags": [
				  {
					"Key": "Application",
					"Value": { "Ref": "AWS::StackId" }
				  },
				  {
					"Key": "Network",
					"Value": "Public"
				  }
				],
				"MapPublicIpOnLaunch":"yes"
			  }
    },

    "PublicSubnet2": {
       "Type": "AWS::EC2::Subnet",
       "Properties": {
			   "VpcId": { "Ref": "VPC" },
			   "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Public2", "CIDR" ] },
			   "AvailabilityZone": {
				  "Fn::Select": [
					"1",
					{ "Fn::GetAZs": "" }
				  ]
				},
				"Tags": [
				  {
					"Key": "Application",
					"Value": { "Ref": "AWS::StackId" }
				  },
				  {
					"Key": "Network",
					"Value": "Public"
				  }
				],
				"MapPublicIpOnLaunch":"yes"
			         }
			  
    },

	"PrivateSubnet1": {
       "Type": "AWS::EC2::Subnet",
       "Properties": {
				   "VpcId": { "Ref": "VPC" },
				   "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Private1", "CIDR" ] },
				   "AvailabilityZone": {
					  "Fn::Select": [
						"3",
						{ "Fn::GetAZs": "" }
					  ]
					},
					"Tags": [
					  {
						"Key": "Application",
						"Value": { "Ref": "AWS::StackId" }
					  },
					  {
						"Key": "Network",
						"Value": "Private"
					  }
					]					
      }
    },


  "PrivateSubnet2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				   "VpcId": { "Ref": "VPC" },
				   "CidrBlock": { "Fn::FindInMap": [ "SubnetConfig", "Private2", "CIDR" ] },
				   "AvailabilityZone": {
					  "Fn::Select": [
						"4",
						{ "Fn::GetAZs": "" }
					  ]
					},
					"Tags": [
					  {
						"Key": "Application",
						"Value": { "Ref": "AWS::StackId" }
					  },
					  {
						"Key": "Network",
						"Value": "Private"
					  }
					]
				  }
				},

   "InternetGateway": {

					  "Type": "AWS::EC2::InternetGateway",
					  "Properties": {
						"Tags": [
						  {
							"Key": "Application",
							"Value": { "Ref": "AWS::StackId" }
						  },
						  {
							"Key": "Network",
							"Value": "Public"
						  }
						]
					  }
                   },

  "GatewayToInternet": {
			 
			 "Type": "AWS::EC2::VPCGatewayAttachment",
			  "Properties": {
			  "VpcId": { "Ref": "VPC" },
			  "InternetGatewayId": { "Ref": "InternetGateway" }
			 
			  }
			},	
  
  "PublicRouteTable": {
			  "Type": "AWS::EC2::RouteTable",
			  "Properties": {
					"VpcId": { "Ref": "VPC" },
					"Tags": [
					  {
						"Key": "Application",
						"Value": { "Ref": "AWS::StackId" }
					  },
					  {
						"Key": "Network",
						"Value": "Public"
					  }
					]
			  }
			},
  
  "PublicRoute": {

			  "Type": "AWS::EC2::Route",
			  "DependsOn": "GatewayToInternet",
			  "Properties": {
				"RouteTableId": { "Ref": "PublicRouteTable" },
				"DestinationCidrBlock": "10.0.0.0/16",
				"GatewayId": { "Ref": "InternetGateway" }
			  }
			},

 "PublicSubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
			"SubnetId": { "Ref": "PublicSubnet1" },
			"RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },

 "PublicSubnetRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
			"SubnetId": { "Ref": "PublicSubnet2" },
			"RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },

	"PublicNetworkAcl": {
			  "Type": "AWS::EC2::NetworkAcl",
			  "Properties": {
					"VpcId": { "Ref": "VPC" },
					"Tags": [
					  {
						"Key": "Application",
						"Value": { "Ref": "AWS::StackId" }
					  },
					  {
						"Key": "Network",
						"Value": "Public"
					  }
					]
			  }
    },

	 "InboundHTTPPublicNetworkAclEntry": {
			  "Type": "AWS::EC2::NetworkAclEntry",
			  "Properties": {
					"NetworkAclId": { "Ref": "PublicNetworkAcl" },
					"RuleNumber": "100",
					"Protocol": "6",
					"RuleAction": "allow",
					"Egress": "false",
					"CidrBlock": "0.0.0.0/0",
					"PortRange": {
					  "From": "80",
					  "To": "80"
					}
			  }
    },

	
    "InboundDynamicPortPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "PublicNetworkAcl" },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },

  "InboundSSHPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
			"NetworkAclId": { "Ref": "PublicNetworkAcl" },
			"RuleNumber": "102",
			"Protocol": "6",
			"RuleAction": "allow",
			"Egress": "false",
			"CidrBlock": { "Ref": "SSHLocation" },
			"PortRange": {
			  "From": "22",
			  "To": "22"
			}
        }
    },

	 "OutboundPublicNetworkAclEntry": {
		  "Type": "AWS::EC2::NetworkAclEntry",
		  "Properties": {
			"NetworkAclId": { "Ref": "PublicNetworkAcl" },
			"RuleNumber": "100",
			"Protocol": "6",
			"RuleAction": "allow",
			"Egress": "true",
			"CidrBlock": "0.0.0.0/0",
			"PortRange": {
			  "From": "0",
			  "To": "65535"
			}
		  }
    },

   "PublicSubnetNetworkAclAssociation1": {
		  "Type": "AWS::EC2::SubnetNetworkAclAssociation",
		  "Properties": {
			"SubnetId": { "Ref": "PublicSubnet1" },
			"NetworkAclId": { "Ref": "PublicNetworkAcl" }
		  }
    },

    "PublicSubnetNetworkAclAssociation2": {
		  "Type": "AWS::EC2::SubnetNetworkAclAssociation",
		  "Properties": {
			"SubnetId": { "Ref": "PublicSubnet2" },
			"NetworkAclId": { "Ref": "PublicNetworkAcl" }
		  }
		},

	"NATGateway" : {
		   "Type" : "AWS::EC2::NatGateway",
		   "Properties" : {
			  "AllocationId" : { "Fn::GetAtt" : ["EIP", "AllocationId"]},
			  "SubnetId" : { "Ref" : "PublicSubnet1"},
			  "Tags" : [ {"Key" : "Network", "Value" : "Public" } ]
				}
			},

	 "EIP" : {
			   "DependsOn" : "GatewayToInternet",
			   "Type" : "AWS::EC2::EIP",
			   "Properties" : {
				  "Domain" : "VPC"
			  }
			},

	 "Route" : {
		   "Type" : "AWS::EC2::Route",
		   "Properties" : {
			  "RouteTableId" : { "Ref" : "PublicRouteTable" },
			  "DestinationCidrBlock" : "0.0.0.0/0",
			  "NatGatewayId" : { "Ref" : "NATGateway" }
			   }
			}

},

	"Outputs" : {
	}
}
